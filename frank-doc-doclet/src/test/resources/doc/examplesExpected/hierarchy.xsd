<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.2.3-SNAPSHOT">
  <xs:element name="Start">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="StartType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Module">
    <xs:annotation>
      <xs:documentation>Wrapper element to help split up large configuration files into smaller valid XML files. It may be used as root tag when an XML file contains multiple adapters and/or jobs. The Module element itself does not influence the behavior of Frank configurations.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group ref="StartDeclaredChildGroup" />
      <xs:attribute ref="active" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:complexType name="StartType">
    <xs:group ref="StartDeclaredChildGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.hierarchy.Start" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:group name="StartDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Module" minOccurs="0" maxOccurs="unbounded" />
      <xs:group ref="ParamElementGroup" minOccurs="0" maxOccurs="unbounded" />
      <xs:group ref="PipeElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ParamElementGroup">
    <xs:choice>
      <xs:group ref="ParamElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="ParamElementGroupBase">
    <xs:choice>
      <xs:element name="NumberParam">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="NumberParameterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="param" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Param">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ParameterType">
              <xs:attribute name="elementRole" type="xs:string" fixed="param" use="prohibited" />
              <xs:anyAttribute processContents="skip" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="NumberParameterType">
    <xs:attributeGroup ref="NumberParameterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.hierarchy.NumberParameter" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="NumberParameterDeclaredAttributeGroup">
    <xs:attribute name="attributeB" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="NumberParameterCumulativeAttributeGroup">
    <xs:attributeGroup ref="NumberParameterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractParameterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:attributeGroup name="AbstractParameterDeclaredAttributeGroup">
    <xs:attribute name="attributeC" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="ParameterType">
    <xs:attributeGroup ref="ParameterCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.hierarchy.Parameter" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="ParameterDeclaredAttributeGroup">
    <xs:attribute name="attributeA" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ParameterCumulativeAttributeGroup">
    <xs:attributeGroup ref="ParameterDeclaredAttributeGroup" />
    <xs:attributeGroup ref="AbstractParameterDeclaredAttributeGroup" />
  </xs:attributeGroup>
  <xs:group name="PipeElementGroup">
    <xs:choice>
      <xs:element name="Pipe">
        <xs:complexType>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="PipeElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="PipeElementGroupBase">
    <xs:choice>
      <xs:element name="JwtPipe">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="JwtPipeType">
              <xs:attribute name="elementRole" type="xs:string" fixed="pipe" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="JwtPipeType">
    <xs:attributeGroup ref="JwtPipeDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.hierarchy.JwtPipe" use="prohibited" />
  </xs:complexType>
  <xs:attributeGroup name="JwtPipeDeclaredAttributeGroup">
    <xs:attribute name="jwtAttribute" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:simpleType name="frankBoolean">
    <xs:restriction base="xs:string">
      <xs:pattern value="(true|false)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="frankInt">
    <xs:restriction base="xs:string">
      <xs:pattern value="((\+|-)?[0-9]+)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attribute name="active">
    <xs:annotation>
      <xs:documentation>If defined and empty or false, then this element and all its children are ignored</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:pattern value="!?(($\{[^\}]+\})|([tT][rR][uU][eE])|([fF][aA][lL][sS][eE]))" />
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:simpleType name="variableRef">
    <xs:restriction base="xs:string">
      <xs:pattern value="$\{[^\}]+\}" />
    </xs:restriction>
  </xs:simpleType>
</xs:schema>