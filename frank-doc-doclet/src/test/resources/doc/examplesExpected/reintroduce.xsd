<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.2.3-SNAPSHOT">
  <xs:element name="Master">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="MasterType" />
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Module">
    <xs:annotation>
      <xs:documentation>Wrapper element to help split up large configuration files into smaller valid XML files. It may be used as root tag when an XML file contains multiple adapters and/or jobs. The Module element itself does not influence the behavior of Frank configurations.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group ref="MasterDeclaredChildGroup" />
      <xs:attribute ref="active" />
      <xs:anyAttribute namespace="##other" processContents="skip" />
    </xs:complexType>
  </xs:element>
  <xs:complexType name="BType">
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.examples.reintroduce.MyConfigChild" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:attribute name="elementRole" type="xs:string" fixed="b" use="prohibited" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:complexType name="MasterType">
    <xs:group ref="MasterDeclaredChildGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.examples.reintroduce.Master" use="prohibited" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:complexType>
  <xs:group name="MasterDeclaredChildGroup">
    <xs:sequence>
      <xs:element ref="Module" minOccurs="0" maxOccurs="unbounded" />
      <xs:group ref="AElementGroup" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:group>
  <xs:group name="AElementGroup">
    <xs:choice>
      <xs:element name="A">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="B" type="BType" />
            </xs:choice>
          </xs:sequence>
          <xs:attribute ref="active" />
          <xs:attribute name="elementRole" type="xs:string" fixed="a" use="prohibited" />
          <xs:attribute name="className" type="xs:string" use="required" />
          <xs:anyAttribute processContents="skip" />
        </xs:complexType>
      </xs:element>
      <xs:group ref="AElementGroupBase" />
    </xs:choice>
  </xs:group>
  <xs:group name="AElementGroupBase">
    <xs:choice>
      <xs:element name="ChildA">
        <xs:annotation>
          <xs:documentation>The attribute and the config child are the same as in parent and they are not documented.
 They should still be declared as attribute and config child of Child because of the</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ChildType">
              <xs:attribute name="elementRole" type="xs:string" fixed="a" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="ParentA">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ParentType">
              <xs:attribute name="elementRole" type="xs:string" fixed="a" use="prohibited" />
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ChildType">
    <xs:group ref="ChildCumulativeChildGroup" />
    <xs:attributeGroup ref="ChildCumulativeAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.examples.reintroduce.Child" use="prohibited" />
  </xs:complexType>
  <xs:group name="ChildDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="B" minOccurs="0" maxOccurs="unbounded" type="BType" />
    </xs:sequence>
  </xs:group>
  <xs:group name="ChildCumulativeChildGroup">
    <xs:sequence>
      <xs:group ref="ChildDeclaredChildGroup" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="ChildDeclaredAttributeGroup">
    <xs:attribute name="attribute" type="xs:string" />
  </xs:attributeGroup>
  <xs:attributeGroup name="ChildCumulativeAttributeGroup">
    <xs:attributeGroup ref="ChildDeclaredAttributeGroup" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:complexType name="ParentType">
    <xs:group ref="ParentDeclaredChildGroup" />
    <xs:attributeGroup ref="ParentDeclaredAttributeGroup" />
    <xs:attribute name="className" type="xs:string" fixed="org.frankframework.frankdoc.testtarget.examples.reintroduce.Parent" use="prohibited" />
  </xs:complexType>
  <xs:group name="ParentDeclaredChildGroup">
    <xs:sequence>
      <xs:element name="B" minOccurs="0" maxOccurs="unbounded" type="BType" />
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="ParentDeclaredAttributeGroup">
    <xs:attribute name="attribute" type="xs:string" />
    <xs:attribute ref="active" />
    <xs:anyAttribute namespace="##other" processContents="skip" />
  </xs:attributeGroup>
  <xs:simpleType name="frankBoolean">
    <xs:restriction base="xs:string">
      <xs:pattern value="(true|false)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="frankInt">
    <xs:restriction base="xs:string">
      <xs:pattern value="((\+|-)?[0-9]+)|($\{[^\}]+\})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:attribute name="active">
    <xs:annotation>
      <xs:documentation>If defined and empty or false, then this element and all its children are ignored</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:pattern value="!?(($\{[^\}]+\})|([tT][rR][uU][eE])|([fF][aA][lL][sS][eE]))" />
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:simpleType name="variableRef">
    <xs:restriction base="xs:string">
      <xs:pattern value="$\{[^\}]+\}" />
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
